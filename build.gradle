// Gradle 빌드 스크립트 (Groovy DSL)
// 이 파일은 프로젝트의 빌드 설정(플러그인, 의존성, Java 버전 등)을 정의합니다.

plugins {
	// 자바 플러그인: Java 컴파일, JAR 생성 등 자바 표준 빌드기능을 활성화
	id 'java'

	// Spring Boot 플러그인: 애플리케이션 패키징, 실행, 플러그인 설정 편의 기능 제공
	// 버전은 Spring Boot 릴리즈에 맞게 지정해야 합니다.
	id 'org.springframework.boot' version '3.5.6'

	// Spring 의존성 관리를 도와주는 플러그인 (dependencyManagement)
	id 'io.spring.dependency-management' version '1.1.7'
}

// Gradle 프로젝트의 Group / Version / Description (Maven 좌표 유사)
group = 'com.final'
version = '0.0.1-SNAPSHOT'
description = 'Demo project for Spring Boot'

// Java 컴파일 설정: toolchain을 사용해 특정 Java 버전(여기선 Java 21)로 컴파일하도록 설정
java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21) // Java 21로 컴파일 (로컬에 Java 21이 있어야 함)
	}
}

// configurations 블록: compileOnly 설정이 annotationProcessor를 상속받도록 함.
// -> Lombok 같은 애노테이션 프로세서 관련 의존성 처리에 도움
configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	// 의존성(라이브러리)을 다운로드할 저장소. 보통 mavenCentral 사용.
	mavenCentral()
}

dependencies {
	// Spring Data JPA: JPA + Hibernate를 통한 DB 연동
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

	// Thymeleaf: 서버사이드 템플릿 엔진 (HTML 렌더링)
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'

	// Web: Spring MVC + 내장 톰캣 등 웹 애플리케이션 기능
	implementation 'org.springframework.boot:spring-boot-starter-web'

	// Lombok: 보일러플레이트(게터/세터 등) 자동 생성 - 컴파일 타임에만 필요
	compileOnly 'org.projectlombok:lombok'

	// 개발 편의성: 코드 변경 시 자동 재시작 등 (로컬 개발 환경 전용)
	developmentOnly 'org.springframework.boot:spring-boot-devtools'

	// 런타임 JDBC 드라이버: MariaDB 사용 시
	runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'

	// Lombok 애노테이션 프로세서 (컴파일시 동작)
	annotationProcessor 'org.projectlombok:lombok'

	// Jakarta Annotation API (annotation types) - 필요 시 컴파일 단계에서 참조
	annotationProcessor 'jakarta.annotation:jakarta.annotation-api:2.1.1'

	// Jakarta Persistence API - JPA 인터페이스용 (Spring Boot 3+는 Jakarta namespace 사용)
	annotationProcessor 'jakarta.persistence:jakarta.persistence-api:3.1.0'

	// QueryDSL: 정적타입 쿼리 생성기 (Spring Boot 3 / Jakarta 환경에서 classifier 'jakarta' 사용)
	implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
	annotationProcessor 'com.querydsl:querydsl-apt:5.0.0:jakarta'

	// 테스트 관련 의존성
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	// JUnit Platform 런처 (테스트 실행 시 사용)
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

// Java 컴파일(Task) 설정을 추가로 구성
tasks.withType(JavaCompile).configureEach {
	// annotationProcessor 의존성 경로를 명시적으로 설정 (annotationProcessor 구성을 사용)
	options.annotationProcessorPath = configurations.annotationProcessor

	// QueryDSL의 Q클래스 생성시 @Generated 어노테이션을 jakarta.annotation.Generated로 설정
	// 이유: Spring Boot 3+는 javax -> jakarta 네임스페이스로 전환되었기 때문
	// (Q 클래스 생성 시 javax Generated가 들어가면 컴파일/경고 문제가 생길 수 있음)
	options.compilerArgs += [
			"-Aquerydsl.generatedAnnotationClass=jakarta.annotation.Generated"
	]
}

// 테스트 태스크에서 JUnit Platform 사용하도록 설정
tasks.named('test') {
	useJUnitPlatform()
}

// QueryDSL이 생성하는 Q클래스 등 annotationProcessor로 만들어진 소스 파일을
// 프로젝트의 소스 세트에 추가하여 컴파일에 포함되게 함.
// (빌드 후 IDE에서 Q클래스가 안보이는 경우 이 부분 확인)
sourceSets {
	main.java.srcDirs += file("$buildDir/generated/sources/annotationProcessor/java/main")
}
